name: CI/CD - Build, Push & Deploy Infisical

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  BUILD_NUMBER: ${{ github.run_number }}
  EC2_IP: 15.156.219.253
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ca-central-1
  SECRET_ARN: arn:aws:secretsmanager:ca-central-1:659666453025:secret:infisical-secret-NGmqNX

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Pull base images
        run: |
          docker pull infisical/infisical:latest-postgres
          docker pull postgres:14-alpine
          docker pull redis

      - name: Tag and push custom images
        run: |
          docker tag infisical/infisical:latest-postgres ${{ env.DOCKER_USERNAME }}/infisical:latest
          docker tag infisical/infisical:latest-postgres ${{ env.DOCKER_USERNAME }}/infisical:${{ env.BUILD_NUMBER }}
          docker push ${{ env.DOCKER_USERNAME }}/infisical:latest
          docker push ${{ env.DOCKER_USERNAME }}/infisical:${{ env.BUILD_NUMBER }}

          docker tag postgres:14-alpine ${{ env.DOCKER_USERNAME }}/postgres:latest
          docker tag postgres:14-alpine ${{ env.DOCKER_USERNAME }}/postgres:${{ env.BUILD_NUMBER }}
          docker push ${{ env.DOCKER_USERNAME }}/postgres:latest
          docker push ${{ env.DOCKER_USERNAME }}/postgres:${{ env.BUILD_NUMBER }}

          docker tag redis ${{ env.DOCKER_USERNAME }}/redis-image:latest
          docker tag redis ${{ env.DOCKER_USERNAME }}/redis-image:${{ env.BUILD_NUMBER }}
          docker push ${{ env.DOCKER_USERNAME }}/redis-image:latest
          docker push ${{ env.DOCKER_USERNAME }}/redis-image:${{ env.BUILD_NUMBER }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Install SSH Key for EC2
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Copy Compose File to EC2
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml ubuntu@${{ env.EC2_IP }}:/home/ubuntu/docker-compose.prod.yml

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} << 'EOF'
            set -e

            # Install AWS CLI & Docker
            sudo apt-get update && sudo apt-get install -y awscli jq docker.io docker-compose

            # Pull latest images
            docker pull ${{ env.DOCKER_USERNAME }}/infisical:latest
            docker pull ${{ env.DOCKER_USERNAME }}/postgres:latest
            docker pull ${{ env.DOCKER_USERNAME }}/redis-image:latest

            # Set AWS creds
            export AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ env.AWS_REGION }}

            # Fetch secrets
            SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id ${{ env.SECRET_ARN }} --query SecretString --output text)
            echo "$SECRET_JSON" | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > /home/ubuntu/infisical.env

            # Stop existing containers
            docker compose -f /home/ubuntu/docker-compose.prod.yml --env-file /home/ubuntu/infisical.env down || true

            # Start services
            docker compose -f /home/ubuntu/docker-compose.prod.yml --env-file /home/ubuntu/infisical.env up -d --force-recreate

            # Clean up unused images
            docker image prune -af
          EOF
