name: CI - Build & Push DB Images Infisical
on:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  BUILD_NUMBER: ${{ github.run_number }}
jobs:
  build-and-push-db:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
          
      - name: Build images
        run: |
          docker compose -f docker-compose.prod.yml build
      
      - name: Tag and push Infisical image
        run: |
          # Assuming the service is named 'infisical' in docker-compose
          INFISICAL_IMAGE=$(docker compose -f docker-compose.prod.yml config | grep -A 1 "infisical:" | grep "image:" | awk '{print $2}')
          
          if [ -z "$INFISICAL_IMAGE" ]; then
            echo "Failed to extract Infisical image name from docker-compose"
            exit 1
          fi
          
          docker tag $INFISICAL_IMAGE ${{ env.DOCKER_USERNAME }}/infisical:latest
          docker tag $INFISICAL_IMAGE ${{ env.DOCKER_USERNAME }}/infisical:${{ env.BUILD_NUMBER }}
          docker push ${{ env.DOCKER_USERNAME }}/infisical:latest
          docker push ${{ env.DOCKER_USERNAME }}/infisical:${{ env.BUILD_NUMBER }}
      
      - name: Tag and push Postgres image
        run: |
          # Assuming the service is named 'postgres' in docker-compose
          POSTGRES_IMAGE=$(docker compose -f docker-compose.prod.yml config | grep -A 1 "postgres:" | grep "image:" | awk '{print $2}')
          
          if [ -z "$POSTGRES_IMAGE" ]; then
            echo "Failed to extract Postgres image name from docker-compose"
            exit 1
          fi
          
          docker tag $POSTGRES_IMAGE ${{ env.DOCKER_USERNAME }}/postgres:latest
          docker tag $POSTGRES_IMAGE ${{ env.DOCKER_USERNAME }}/postgres:${{ env.BUILD_NUMBER }}
          docker push ${{ env.DOCKER_USERNAME }}/postgres:latest
          docker push ${{ env.DOCKER_USERNAME }}/postgres:${{ env.BUILD_NUMBER }}
      
      - name: Tag and push Redis image
        run: |
          # Assuming the service is named 'redis' in docker-compose
          REDIS_IMAGE=$(docker compose -f docker-compose.prod.yml config | grep -A 1 "redis:" | grep "image:" | awk '{print $2}')
          
          if [ -z "$REDIS_IMAGE" ]; then
            echo "Failed to extract Redis image name from docker-compose"
            exit 1
          fi
          
          docker tag $REDIS_IMAGE ${{ env.DOCKER_USERNAME }}/redis-image:latest
          docker tag $REDIS_IMAGE ${{ env.DOCKER_USERNAME }}/redis-image:${{ env.BUILD_NUMBER }}
          docker push ${{ env.DOCKER_USERNAME }}/redis-image:latest
          docker push ${{ env.DOCKER_USERNAME }}/redis-image:${{ env.BUILD_NUMBER }}
